<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{title}}</title>
  {{> css}}
</head>
<body>
  {{> javascript}}
  <div class="bs-docs-header" id="content" > 
    <div class="container">
      <h1>{{sitename}}</h1>
      <p style="color: #b0b0b0;">In order to initiate the {{sitename}} database , the form sets need to be primed. This is done by creating 2 database entries that can be used to create all of the additional forms.</p>
    </div> 
  </div>
  <style type="text/css">
    /* Page headers */
    .bs-docs-header {
      margin-bottom: 40px;
      font-size: 20px;
    }
    .bs-docs-header h1 {
      margin-top: 0;
      color: #fff;
    }
    .bs-docs-header p {
      margin-bottom: 0;
      font-weight: 300;
      line-height: 1.4;
    }
    .bs-docs-header .container {
      position: relative;
    }
    @media (min-width: 768px) {
      .bs-docs-header {
        padding-top: 60px;
        padding-bottom: 60px;
        font-size: 24px;
        text-align: left;
      }
      .bs-docs-header h1 {
        font-size: 60px;
        line-height: 1;
      }
    }
    @media (min-width: 992px) {
      .bs-docs-header h1,
      .bs-docs-header p {
        margin-right: 380px;
      }
    }
    /* Share masthead with page headers */
    .bs-docs-masthead,
    .bs-docs-header {
      background: #212121;
      background: -moz-linear-gradient(top, #373737, #212121);
      background: -webkit-linear-gradient(top, #373737, #212121);
      background: -ms-linear-gradient(top, #373737, #212121);
      background: -o-linear-gradient(top, #373737, #212121);
      background: linear-gradient(top, #373737, #212121);
    }
    #nav.affix {
      position: fixed;
      padding-top: 15px;
      top: 0;
      width: 263px;
    }
  </style>
  <div class="container" id="databaseInit">
    <div class="row">
      <div class="col-md-12">
        <p>Modify the schema and options to create initial database forms. Refer to <a href="http://www.alpacajs.org/" target="_blank">Alpaca.js</a> for details on the schema and options layout. This tab creates the 2 primary forms used for all database use.</p>
      </div>
    </div>
    <div class="row">
      <div class="col-md-6">

       <div id="stage2" class="row">
        <div class="col-md-12">
         <h1>Stage 1 - Create the Database Primer</h1>
         <p>Edit the text areas below to customise the first primer form. Use the update for button to view the primer form.</p>
       </div>
       <div class="col-md-6">
        <h3>Schema</h3>
        <textarea class="form-control"  id="schema" name="schema"  style="height: 250px">
          {"title": "Form Deployment", "description": "Insert Schema and Options to design your form.", "type": "object", "properties": {"schema": {"title": "Schema"}, "options": {"title": "Options"} } } </textarea>
        </div>
        <div class="col-md-6">
          <h3>Options</h3>
          <textarea class="form-control" id="options" name="options"  style="height: 250px">
            {"form": {"buttons": {"submit": {"title": "Submit", "id": "submit", "click": ""} } }, "helper": "Insert Schema and Options to design your form.", "fields": {"schema": {"type": "json", "rows": 10, "cols": 40, "helper": "Schema Set.", "validate": false }, "options": {"type": "json", "rows": 10, "cols": 40, "helper": "Option Set.", "validate": false } }, "focus": ""}  </textarea>
          </div>
          <div class="col-md-12">
            <p></p>
            <div class="btn-group" role="group" aria-label="...">
              <button type="button" class="btn btn-default" id="updateForm">Update Form</button>
            </div>
            <p></p>
          </div>
        </div>
        <div id="stage3" class="row">
          <div class="col-md-12">
            <h1>Stage 2 - Push the raw entry edit form.</h1>
            <p>Use the client side primer ( above ) to insert the raw edit form ( text areas below) to create the server side raw entry form.</p>
          </div>
          <div class="col-md-12">
            <div class="form-group">
              <label for="exampleInputEmail1">Name</label>
              <input type="email" class="form-control" id="nameArea" placeholder="" value="Raw Editor">
            </div>
            <div class="form-group">
              <label for="exampleInputEmail1">Detail</label>
              <input type="email" class="form-control" id="DetailArea" placeholder="" value="This for is used to edit the raw database items.">
            </div>  
          </div>
          <div class="col-md-6">
            <h3>Schema</h3>
            <textarea class="form-control" class="language-json " id="schema2" name="schema"  style="height: 250px">
              {"title": "Form Deployment", "description": "Insert Schema and Options to design your form.", "type": "object", "properties": {"name": {"title": "name"}, "detail": {"title": "detail"}, "childType": {"title": "childType"}, "objectType": {"title": "objectType", "enum": ["form", "data", "databasemenu", "other"] }, "entry": {"title": "entry"}, "parentid": {"title": "parentid"}, "elementID": {"title": "elementID"}, "userID": {"title": "userID"}, "revision": {"title": "revision", "enum": ["created", "updated", "deleted"] }, "active": {"title": "active", "enum": ["true", "false"] } } } </textarea>
            </div>
            <div class="col-md-6">
              <h3>Options</h3>
              <textarea class="form-control"   id="options2" name="options"  style="height: 250px">
                {"form": {"buttons": {"submit": {"title": "Submit", "id": "submit", "click": ""} } }, "helper": "Insert Schema and Options to design your form.", "fields": {"detail": {"type": "text"}, "objectType": {"type": "select"}, "revision": {"type": "select"}, "active": {"type": "select", "required": false }, "entry": {"type": "json", "rows": 10, "cols": 40, "helper": "All entry data is stored here.", "validate": false } }, "focus": ""} </textarea>
              </div>
            </div>
            <div id="stage4" class="row">
              <div class="col-md-12">
                <h1>Stage 3 - Push the Navigation Editor Form.</h1>
                <p>Create the default navigation form.</p>
              </div>
              <div class="col-md-12">
                <h3>Data Set</h3>
                <textarea class="form-control" class="form-control " id="schema3" name="schema"  style="height: 250px">
                  {"name":"Database Items", "detail":"Use for the creation database items.", "objectType":"form", "entry":{"options": {"form": {"buttons": {"submit": {"title": "Submit", "id": "submit", "click": ""} } }, "helper": "Use this form to add menu items to the navigation menu.", "fields": {"detail": {"type": "text", "rows": 4, "cols": 40, "helper": "All entry data is stored here.", "validate": true }, "objectType": {"type": "select"}, "revision": {"type": "select"}, "active": {"type": "select", "required": false }, "entry": {"type": "json", "rows": 4, "cols": 40, "helper": "All entry data is stored here.", "validate": false } }, "focus": ""}, "schema": {"title": "Navigation Menu", "type": "object", "properties": {"description": {"title": "Description"}, "value": {"title": "Value"}, "unit": {"title": "Unit"}, "detail": {"title": "Detail"}, "standard": {"title": "Standard"}, "parent": {"title": "Parent"}, "icon": {"title": "Icon"}, "template": {"title": "Template"}, "headings": {"title": "Headings", "enum": ["value", "detail"] } } } } } </textarea>
                </div>
                <div class="col-md-12">
                  <p></p>
                  <div class="btn-group" role="group" aria-label="...">
                    <button type="button" class="btn btn-default" id="setData1">Set Form Data</button>
                  </div>
                  <p></p>
                </div>
              </div>
              <div id="stage5" class="row">
                <div class="col-md-12">
                  <h1>Stage 4 - Push the Database Items Form.</h1>
                  <p>Create the default database generation structure.</p>
                </div>
                <div class="col-md-12">
                  <h3>Data Set</h3>
                  <textarea class="form-control" class="form-control " id="schema4" name="schema"  style="height: 250px">
                    {"name":"Navigation Menu", "detail":"Use for the creation of Navigation jstree structures.", "objectType":"form", "entry":{"options": {"form": {"buttons": {"submit": {"title": "Submit", "id": "submit", "click": ""} } }, "helper": "Use this form to add menu items to the navigation menu.", "fields": {"detail": {"type": "text", "rows": 4, "cols": 40, "helper": "All entry data is stored here.", "validate": true }, "objectType": {"type": "select"}, "revision": {"type": "select"}, "active": {"type": "select", "required": false }, "entry": {"type": "json", "rows": 4, "cols": 40, "helper": "All entry data is stored here.", "validate": false } }, "focus": ""}, "schema": {"title": "Navigation Menu", "type": "object", "properties": {"description": {"title": "Description"}, "value": {"title": "Value"}, "unit": {"title": "Unit"}, "detail": {"title": "Detail"}, "standard": {"title": "Standard"}, "parent": {"title": "Parent"}, "icon": {"title": "Icon"}, "template": {"title": "Template"}, "headings": {"title": "Headings", "enum": ["value", "detail"] } } } } }
                  </textarea>
                </div>
                <div class="col-md-12">
                  <p></p>
                  <div class="btn-group" role="group" aria-label="...">
                    <button type="button" class="btn btn-default" id="setData2">Set Form Data</button>
                  </div>
                  <p></p>
                </div>
              </div>
            </div>
            <div class="col-md-6">
             <div class="col-md-12"  >
               <h1>Form Area.</h1>
               <p>Use the form below to push each stage form into the database.</p>
             </div>
             <div class="well col-md-12"  >
               <div id="form1"></div>
             </div>
           </div>
         </div>
       </div>
       <div class="container" id="admintable">
        <div>
          <!-- Nav tabs -->
          <ul class="nav nav-tabs" role="tablist">
            <li role="presentation" class="active"><a href="#home" aria-controls="home" role="tab" data-toggle="tab">Primer Forms</a></li>
            <li role="presentation"><a href="#formtab" aria-controls="formtab" role="tab" data-toggle="tab">Database Forms</a></li>
            <li role="presentation"><a href="#profile" aria-controls="profile" role="tab" data-toggle="tab">Navigation Menu</a></li>
            <li role="presentation"><a href="#databaseitems" aria-controls="databaseitems" role="tab" data-toggle="tab">Database Items</a></li>
          </ul>
          <!-- Tab panes -->
          <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" id="home">
             <div class="row"> 
              <div class="col-md-12" id="stage6">
                <h1>Primer Forms</h1>
                <p>The database primer forms. These are the 2 initialization forms for the database, and can be used to edit all subsequent database information.</p>
              </div>
              <div class="col-md-12">
               {{> tableload objectType="primer"}}
             </div>
           </div>
         </div>
         <div role="tabpanel" class="tab-pane" id="formtab">
           <div class="row"> 
            <div class="col-md-12" id="stage7">
              <h1>Database Forms</h1>
              <p>Create or modify the database structure here. This area can be used to create data tables of many types and structures. What would likely be required in future versions is a form hierarchy , that creates forms with different hardwired properties defining separate data type i.e. which template to use or which parent id etc. could be achieved with some kind of data parse like the short code in WordPress.</p>
            </div>

            <div class="col-md-12">
              <div id="formsTable"></div> 
            </div>
          </div>
        </div>
        <div role="tabpanel" class="tab-pane" id="profile">
         <div class="row"> 
          <div class="col-md-12" id="stage8">
            <h1>Navigation Menu</h1>
            <p>Create or modify the navigation structure here.</p>
          </div>
          <div class="col-md-12">
            {{> navigation databaseId="'58a3fe13ea87443b98c19688'"}}
            <div id="navigationTable"></div>
          </div>
        </div>
      </div>
      <div role="tabpanel" class="tab-pane" id="databaseitems">
       <div class="row"> 
        <div class="col-md-12" id="stage9">
          <h1>Database Items</h1>
          <p>Create or modify database items here.</p>
        </div>
        <div class="col-md-12">
         <div id="databaseItemsTable"></div> 
       </div>
     </div>
   </div>
 </div>
</div>
</div>

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" id="myModal">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
       <div id="modal-body"></div>
       <div id="formAreaModal"></div>
     </div>
     <div class="modal-footer">
      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
    </div>
  </div>
</div>
</div>

<script type="text/javascript">
  //first run used the primer as the name.
  var names = ''
  var description = ''
  var childType = ''
  var primer

///////////////////////////////////////////////////////////////////
//////  DETERMINE WHAT IS STILL REQUIRED FOR THE DATABASE   //////
/////////////////////////////////////////////////////////////////
function getthecurrentForms(objectType,toggle){
  jQuery.ajax({
    'url': '/getshortdata',
    'async': true,
    'global': false,
    'success': function (dataSchemaObject) {
     dataset = jQuery.parseJSON( dataSchemaObject );
     switch(true){
      case(dataset.length == 0) :
      names = 'Primer Form'
      description = 'The first form added to the database , Used for the creation of all new forms.'
      childType =''
      var form = {
        schema : JSON.parse($('#schema').val()) ,
        options : JSON.parse($('#options').val())
      }
      formInit(form.schema,form.options)
      $('#stage3').html('')
      $('#stage4').html('')
      $('#stage5').html('')
      $('#admintable').html('')
      break;
      case(dataset.length == 1) :
      names = 'Raw Editor Form'
      description = 'The second form added to the database , Used for the editing of all elements in the database.'
      starterForms('','','use','')
      $('#stage2').html('')
      $('#stage4').html('')
      $('#stage5').html('')
      $('#admintable').html('')
      break;
      case(dataset.length == 2) :
      names = 'Navigation Menus'
      description = 'This form is used for the creation of the Navigation jstree Structures.'
      starterForms('','','raw','')
      $('#stage2').html('')
      $('#stage3').html('')
      $('#stage5').html('')
      $('#admintable').html('')
      break;
      case(dataset.length == 3) :
      names = 'Database Items'
      description = 'This form is used to create the default database generation structure'
      starterForms('','','raw','')
      $('#stage2').html('')
      $('#stage3').html('')
      $('#stage4').html('')
      $('#admintable').html('')
      break;
      case(dataset.length >= 4) :
      $('#databaseInit').html('')
      //Table loading area
      loadDataBaseMenu('','formsTable')    
      loadDataBaseMenu(dataset[3]._id,'navigationTable')
      break;
    } 
  }
}); 
}

////////////////////////////////////
////        INITIALIZE         //// 
//////////////////////////////////
$(document).ready(function(){
  getthecurrentForms('form','true')
// Warning Duplicate IDs
$('[id]').each(function(){
  var ids = $('[id="'+this.id+'"]');
  if(ids.length>1 && ids[0]==this){
   $( this ).css( "color", "red" )
   $( this ).css( "background", "green" )
   console.warn('Multiple IDs #'+this.id);
 }
});
});

////////////////////////////////////////////
////        UPDATE FORM BUTTON         //// 
//////////////////////////////////////////
$('#updateForm').click(function(){
  var form = {
    schema : JSON.parse($('#schema').val()) ,
    options : JSON.parse($('#options').val())
  }
  //Test alpaca form for true , i.e if it exists , then destroy it.
  control = $("#form1").alpaca("destroy");
  if (control) {
    formInit(form.schema,form.options)
  } else { 
    formInit(form.schema,form.options)
  }
})

//////////////////////////////////////
////        CREATE FORM          //// 
////////////////////////////////////
function formInit(schema,options){
  //work areound for the special requirments on the submit button.
  options.form.buttons.submit.click = function(e){
    e.preventDefault()
    var value = this.getValue();
    clickSubmit1(value)
  }
  $("#form1").alpaca({
    "schema": schema,
    "options": options,
  });
}

//////////////////////////////////////////////
////        SUBMIT BUTTON CLICK          //// 
////////////////////////////////////////////
function clickSubmit1(dataset){
  var str = JSON.stringify(primer, null, 2);
  $('#jsonArea').html(str)
  primer = {
    'name' :names,
    'detail' : description,
    'entry': dataset,
    'parentid' :'',
    'elementID' :'', 
    'userID' :'',
    'childType' : childType ,
    'objectType':'primer',
    'revision' :'created',
    'active' : "true",
  }
  jQuery.ajax({
    'url': '/create',
    'type': 'POST', 
    'dataType': 'json',
    'contentType': 'application/json', 
    'data': JSON.stringify(primer),
    'success': function (dataSchemaObject) {
      window.location = dataSchemaObject.redirect
    },
    'error' :function (dataSchemaObject) {
      window.location = dataSchemaObject.redirect
    },
  });  
}

///////////////////////////////////////////////
////////  TABLE LOADING FROM PARENT ID ///////
/////////////////////////////////////////////
function loadDataBaseMenu(ids,location){
//Ensure that the first load error is covered , also any other errors.
jQuery.ajax({
 'async': true,
 'global': false,
 'url': '/parentid?ids='+ids,
 'success': function (dataSchemaObject) {
   jQuery('#'+location).html("")
   jQuery('#'+location).html(dataSchemaObject)
 }
});
}

//////////////////////////////////////
////////    GET FORM BY ID  /////////
////////////////////////////////////                                                                                                              
function starterForms(formdata,idItem,raw,parentid){
  jQuery.ajax({
    'url': '/getform?formdata='+formdata+'&idItem='+idItem+'&raw='+raw+'&parentid='+parentid,
    'async': true,
    'global': false,
    'success': function (dataSchemaObject) {
      $('#form1').html(dataSchemaObject)
    }
  });
}

//////////////////////////////////////
////////    SET FORM DATA   /////////
//////////////////////////////////// 
$('#setData1').click(function(){
 var temp = JSON.parse($('#schema3').val())
//get the id for the raw edit form.
jQuery.ajax({
  'url': '/getshortdata',
  'async': true,
  'global': false,
  'success': function (dataSchemaObject) {
   dataset = jQuery.parseJSON( dataSchemaObject );
   temp.parentid = dataset[1]._id
   $("#form_"+formdata+idItem+formid1).alpaca('get').setValue(temp)
 }
})
})

//////////////////////////////////////
////////    SET FORM DATA   /////////
//////////////////////////////////// 
$('#setData2').click(function(){
 var temp = JSON.parse($('#schema4').val())
//get the id for the raw edit form.
jQuery.ajax({
  'url': '/getshortdata',
  'async': true,
  'global': false,
  'success': function (dataSchemaObject) {
   dataset = jQuery.parseJSON( dataSchemaObject );
   temp.parentid = dataset[1]._id
   temp.childType = dataset[2]._id
   $("#form_"+formdata+idItem+formid1).alpaca('get').setValue(temp)
 }
})
})
</script>
</body>
</html>
